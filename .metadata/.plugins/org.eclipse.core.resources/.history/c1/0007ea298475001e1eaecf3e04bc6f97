package entities;

import static utilz.Constants.Directions.DOWN;
import static utilz.Constants.Directions.LEFT;
import static utilz.Constants.Directions.RIGHT;
import static utilz.Constants.Directions.UP;
import static utilz.Constants.PlayerConstants.GetSpriteAmount;
import static utilz.Constants.PlayerConstants.IDLE;
import static utilz.Constants.PlayerConstants.RUNNING;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;

import javax.imageio.ImageIO;

public class Player extends Entity {
	
	private BufferedImage[][] animations;
	public Player(float x, float y) {
		super(x, y);
	}
	
	public void update() {
		
	}
	
	public void render() {
		public void setDirection(int direction) {
			this.playerDirection = direction;
			moving = true;
		}
		
		public void setMoving(boolean moving) {
			this.moving = moving;
		}
		
		public void updateAnimationTick() {
			animationTick++;
			if (animationTick >= animationSpeed) {
				animationTick = 0;
				animationIndex++;
				if (animationIndex >= GetSpriteAmount(playerAction)) {
					animationIndex = 0;
				}
			}
		}
		
		public void setAnimation() {
			if (moving) {
				playerAction = RUNNING;
			} else {
				playerAction = IDLE;
			}
		}
		
		private void updatePosition() {
			if (moving) {
				switch(playerDirection) {
				case LEFT:
					xDelta -= 5;
					break;
				case UP:
					yDelta -= 5;
					break;
				case RIGHT:
					xDelta += 5;
					break;
				case DOWN:
					yDelta += 5;
					break;
				}
			}
		}
	}
	
	public void loadAnimations() {
		InputStream is = getClass().getResourceAsStream("/player_sprites.png");		
		try {
			BufferedImage image = ImageIO.read(is);
			animations = new BufferedImage[9][6];
			for (int j = 0; j < animations.length; j++) {
				for (int i = 0; i< animations[j].length; i++) {
					animations[j][i] = image.getSubimage(i*64, j*40, 64, 40);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				is.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}
